/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Pitch
 */
export interface Pitch {
    /**
     * 
     * @type {string}
     * @memberof Pitch
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pitch
     */
    'noteLetter'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pitch
     */
    'accidental'?: string;
    /**
     * 
     * @type {number}
     * @memberof Pitch
     */
    'octave'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pitch
     */
    'midiNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pitch
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface QuizAttemptResponseDto
 */
export interface QuizAttemptResponseDto {
    /**
     * 
     * @type {number}
     * @memberof QuizAttemptResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {QuizResponseDto}
     * @memberof QuizAttemptResponseDto
     */
    'quiz'?: QuizResponseDto;
    /**
     * 
     * @type {string}
     * @memberof QuizAttemptResponseDto
     */
    'startedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizAttemptResponseDto
     */
    'completedAt'?: string;
}
/**
 * 
 * @export
 * @interface QuizResponseDto
 */
export interface QuizResponseDto {
    /**
     * 
     * @type {number}
     * @memberof QuizResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizResponseDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizResponseDto
     */
    'quizUnitName'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizResponseDto
     */
    'quizTypeName'?: string;
    /**
     * 
     * @type {number}
     * @memberof QuizResponseDto
     */
    'level'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuizResponseDto
     */
    'length'?: number;
    /**
     * 
     * @type {Array<Pitch>}
     * @memberof QuizResponseDto
     */
    'pitchList'?: Array<Pitch>;
}

/**
 * QuizControllerApi - axios parameter creator
 * @export
 */
export const QuizControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuizzes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startQuiz: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('startQuiz', 'id', id)
            const localVarPath = `/quiz/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizControllerApi - functional programming interface
 * @export
 */
export const QuizControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuizzes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuizResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuizzes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.getAllQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startQuiz(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizAttemptResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startQuiz(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.startQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizControllerApi - factory interface
 * @export
 */
export const QuizControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuizzes(options?: RawAxiosRequestConfig): AxiosPromise<Array<QuizResponseDto>> {
            return localVarFp.getAllQuizzes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startQuiz(id: number, options?: RawAxiosRequestConfig): AxiosPromise<QuizAttemptResponseDto> {
            return localVarFp.startQuiz(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizControllerApi - object-oriented interface
 * @export
 * @class QuizControllerApi
 * @extends {BaseAPI}
 */
export class QuizControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public getAllQuizzes(options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).getAllQuizzes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public startQuiz(id: number, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).startQuiz(id, options).then((request) => request(this.axios, this.basePath));
    }
}



